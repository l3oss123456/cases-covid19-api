{"version":3,"sources":["../../../../src/domains/covid19/All_Country/list.js"],"names":["list_covid19_all_country","country","lastdays","_listData","amount_covid19","amount_deads","amount_recovered","date","key","resp","Object","keys","data","timeline","cases","status","values","index","deaths","recovered","push","byCases","R","descend","prop","ascendSort","sort","console","log"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;;;;;SAE8BA,wB;;;;;sFAAf,iBAAwCC,OAAxC,EAAiDC,QAAjD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEX;AACA;AACA;AACIC,YAAAA,SALO,GAKK,EALL;AAMPC,YAAAA,cANO,GAMU,CANV;AAOPC,YAAAA,YAPO,GAOQ,CAPR;AAQPC,YAAAA,gBARO,GAQY,CARZ;AASPC,YAAAA,IATO,GASA,EATA;AAAA,kDAWKN,OAXL;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWFO,YAAAA,GAXE;AAAA;AAAA,mBAYU,yCAAiBP,OAAO,CAACO,GAAD,CAAxB,uBAA0CN,QAA1C,EAZV;;AAAA;AAYHO,YAAAA,IAZG;AAaTF,YAAAA,IAAI,GAAGG,MAAM,CAACC,IAAP,CAAYF,IAAI,CAACG,IAAL,CAAUC,QAAV,CAAmBC,KAA/B,CAAP;;AAEA,gBAAIL,IAAI,CAACM,MAAL,KAAgB,GAApB,EAAyB;AACjBD,cAAAA,KADiB,GACTJ,MAAM,CAACM,MAAP,CAAcP,IAAI,CAACG,IAAL,CAAUC,QAAV,CAAmBC,KAAjC,CADS;;AAEvB,mBAASG,KAAT,IAAkBH,KAAlB,EAAyB;AACvBV,gBAAAA,cAAc,IAAIU,KAAK,CAACG,KAAD,CAAvB;AACD;;AAEKC,cAAAA,MANiB,GAMRR,MAAM,CAACM,MAAP,CAAcP,IAAI,CAACG,IAAL,CAAUC,QAAV,CAAmBK,MAAjC,CANQ;;AAOvB,mBAASD,MAAT,IAAkBC,MAAlB,EAA0B;AACxBb,gBAAAA,YAAY,IAAIS,KAAK,CAACG,MAAD,CAArB;AACD;;AAEKE,cAAAA,SAXiB,GAWLT,MAAM,CAACM,MAAP,CAAcP,IAAI,CAACG,IAAL,CAAUC,QAAV,CAAmBM,SAAjC,CAXK;;AAYvB,mBAASF,OAAT,IAAkBE,SAAlB,EAA6B;AAC3Bb,gBAAAA,gBAAgB,IAAIQ,KAAK,CAACG,OAAD,CAAzB;AACD;;AAEDd,cAAAA,SAAS,CAACiB,IAAV,CAAe;AACbnB,gBAAAA,OAAO,EAAEQ,IAAI,CAACG,IAAL,CAAUX,OADN;AAEba,gBAAAA,KAAK,EAAEV,cAFM;AAGbc,gBAAAA,MAAM,EAAEb,YAHK;AAIbc,gBAAAA,SAAS,EAAEb;AAJE,eAAf;AAMD;;AACDF,YAAAA,cAAc,GAAG,CAAjB;AAtCS;AAAA;;AAAA;AAyCX,gBAAID,SAAJ,EAAe;AACPkB,cAAAA,OADO,GACGC,CAAC,CAACC,OAAF,CAAUD,CAAC,CAACE,IAAF,CAAO,OAAP,CAAV,CADH;AAEPC,cAAAA,UAFO,GAEMH,CAAC,CAACI,IAAF,CAAOL,OAAP,EAAgBlB,SAAhB,CAFN;AAGbA,cAAAA,SAAS,GAAGsB,UAAZ;AACD;;AA7CU,6CA8CJ;AAAEb,cAAAA,IAAI,EAAET,SAAR;AAAmBI,cAAAA,IAAI,EAAEA,IAAI,CAAC,CAAD;AAA7B,aA9CI;;AAAA;AAAA;AAAA;AAgDXoB,YAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AAhDW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import axios from \"../../../utils/axios\"\r\nimport * as R from \"ramda\"\r\n\r\nexport default async function list_covid19_all_country(country, lastdays) {\r\n  try {\r\n    // console.log(\"country;\", country)\r\n    // const resp = await axios(`GET`, `/Brazil?lastdays=${lastdays}`)\r\n    // return resp\r\n    let _listData = []\r\n    let amount_covid19 = 0\r\n    let amount_deads = 0\r\n    let amount_recovered = 0\r\n    let date = []\r\n\r\n    for (let key in country) {\r\n      const resp = await axios(`GET`, `/${country[key]}?lastdays=${lastdays}`)\r\n      date = Object.keys(resp.data.timeline.cases)\r\n\r\n      if (resp.status === 200) {\r\n        const cases = Object.values(resp.data.timeline.cases)\r\n        for (let index in cases) {\r\n          amount_covid19 += cases[index]\r\n        }\r\n\r\n        const deaths = Object.values(resp.data.timeline.deaths)\r\n        for (let index in deaths) {\r\n          amount_deads += cases[index]\r\n        }\r\n\r\n        const recovered = Object.values(resp.data.timeline.recovered)\r\n        for (let index in recovered) {\r\n          amount_recovered += cases[index]\r\n        }\r\n\r\n        _listData.push({\r\n          country: resp.data.country,\r\n          cases: amount_covid19,\r\n          deaths: amount_deads,\r\n          recovered: amount_recovered,\r\n        })\r\n      }\r\n      amount_covid19 = 0\r\n    }\r\n\r\n    if (_listData) {\r\n      const byCases = R.descend(R.prop(\"cases\"))\r\n      const ascendSort = R.sort(byCases, _listData)\r\n      _listData = ascendSort\r\n    }\r\n    return { data: _listData, date: date[0] }\r\n  } catch (error) {\r\n    console.log(\"error from list_covid19_US\", error)\r\n    return error\r\n  }\r\n}\r\n"],"file":"list.js"}